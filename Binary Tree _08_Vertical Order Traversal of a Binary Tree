/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    class info{
        int hd;
        TreeNode node;
        public info(TreeNode node,int hd)
        {
            this.node=node;
            this.hd=hd;
        }
    }
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        Queue<info> q=new LinkedList<>();
        List<List<Integer>> res=new ArrayList<>();
        HashMap<Integer,List<Integer>> map=new HashMap<>();
        int min=0,max=0;
        q.add(new info(root,0));
        while(!q.isEmpty())
        {

        info curr=q.remove();
            if(curr.node==null)
            {
                if(q.isEmpty())
                {
                    break;
                }else
                {
                    q.add(null);
                }
            }else
            {
                if(!map.containsKey(curr.hd))
                {
                    map.put(curr.hd,new ArrayList<>());
                    map.get(curr.hd).add(curr.node.val);
                   
                }else
                {
                    map.get(curr.hd).add(curr.node.val);
                    
                }
                if(curr.node.left!=null)
                {
                    q.add(new info(curr.node.left,curr.hd-1));
                    min=Math.min(min,curr.hd-1);
                }
                if(curr.node.right!=null)
                {
                    q.add(new info(curr.node.right,curr.hd+1));
                    max=Math.max(max,curr.hd+1);
                }
            }
        }
        for(int i=min;i<=max;i++)
        {
            List<Integer> ans=map.get(i);  
            Collections.sort(ans); 
            res.add(ans);
        }
        return res;

    }
}
